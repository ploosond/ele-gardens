/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TeamsRouteImport } from './routes/teams'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId'
import { Route as ProductsProductIdRouteImport } from './routes/products/$productId'
import { Route as AdminProductsRouteImport } from './routes/admin/products'
import { Route as AdminEmployeesRouteImport } from './routes/admin/employees'

const PolicyLazyRouteImport = createFileRoute('/policy')()
const LoginLazyRouteImport = createFileRoute('/login')()
const LocationLazyRouteImport = createFileRoute('/location')()
const ContactLazyRouteImport = createFileRoute('/contact')()
const CareerLazyRouteImport = createFileRoute('/career')()
const AboutLazyRouteImport = createFileRoute('/about')()
const ProjectsIndexLazyRouteImport = createFileRoute('/projects/')()
const ProductsIndexLazyRouteImport = createFileRoute('/products/')()

const PolicyLazyRoute = PolicyLazyRouteImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/policy.lazy').then((d) => d.Route))
const LoginLazyRoute = LoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))
const LocationLazyRoute = LocationLazyRouteImport.update({
  id: '/location',
  path: '/location',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/location.lazy').then((d) => d.Route))
const ContactLazyRoute = ContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))
const CareerLazyRoute = CareerLazyRouteImport.update({
  id: '/career',
  path: '/career',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/career.lazy').then((d) => d.Route))
const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const TeamsRoute = TeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexLazyRoute = ProjectsIndexLazyRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/projects/index.lazy').then((d) => d.Route),
)
const ProductsIndexLazyRoute = ProductsIndexLazyRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/products/index.lazy').then((d) => d.Route),
)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const ProjectsProjectIdRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsProductIdRoute = ProductsProductIdRouteImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProductsRoute = AdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRoute,
} as any)
const AdminEmployeesRoute = AdminEmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/teams': typeof TeamsRoute
  '/about': typeof AboutLazyRoute
  '/career': typeof CareerLazyRoute
  '/contact': typeof ContactLazyRoute
  '/location': typeof LocationLazyRoute
  '/login': typeof LoginLazyRoute
  '/policy': typeof PolicyLazyRoute
  '/admin/employees': typeof AdminEmployeesRoute
  '/admin/products': typeof AdminProductsRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/admin/': typeof AdminIndexRoute
  '/products': typeof ProductsIndexLazyRoute
  '/projects': typeof ProjectsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/teams': typeof TeamsRoute
  '/about': typeof AboutLazyRoute
  '/career': typeof CareerLazyRoute
  '/contact': typeof ContactLazyRoute
  '/location': typeof LocationLazyRoute
  '/login': typeof LoginLazyRoute
  '/policy': typeof PolicyLazyRoute
  '/admin/employees': typeof AdminEmployeesRoute
  '/admin/products': typeof AdminProductsRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/admin': typeof AdminIndexRoute
  '/products': typeof ProductsIndexLazyRoute
  '/projects': typeof ProjectsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/teams': typeof TeamsRoute
  '/about': typeof AboutLazyRoute
  '/career': typeof CareerLazyRoute
  '/contact': typeof ContactLazyRoute
  '/location': typeof LocationLazyRoute
  '/login': typeof LoginLazyRoute
  '/policy': typeof PolicyLazyRoute
  '/admin/employees': typeof AdminEmployeesRoute
  '/admin/products': typeof AdminProductsRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/admin/': typeof AdminIndexRoute
  '/products/': typeof ProductsIndexLazyRoute
  '/projects/': typeof ProjectsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/teams'
    | '/about'
    | '/career'
    | '/contact'
    | '/location'
    | '/login'
    | '/policy'
    | '/admin/employees'
    | '/admin/products'
    | '/products/$productId'
    | '/projects/$projectId'
    | '/admin/'
    | '/products'
    | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/teams'
    | '/about'
    | '/career'
    | '/contact'
    | '/location'
    | '/login'
    | '/policy'
    | '/admin/employees'
    | '/admin/products'
    | '/products/$productId'
    | '/projects/$projectId'
    | '/admin'
    | '/products'
    | '/projects'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/teams'
    | '/about'
    | '/career'
    | '/contact'
    | '/location'
    | '/login'
    | '/policy'
    | '/admin/employees'
    | '/admin/products'
    | '/products/$productId'
    | '/projects/$projectId'
    | '/admin/'
    | '/products/'
    | '/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  TeamsRoute: typeof TeamsRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CareerLazyRoute: typeof CareerLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  LocationLazyRoute: typeof LocationLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  PolicyLazyRoute: typeof PolicyLazyRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  ProductsIndexLazyRoute: typeof ProductsIndexLazyRoute
  ProjectsIndexLazyRoute: typeof ProjectsIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/policy': {
      id: '/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof PolicyLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/location': {
      id: '/location'
      path: '/location'
      fullPath: '/location'
      preLoaderRoute: typeof LocationLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/career': {
      id: '/career'
      path: '/career'
      fullPath: '/career'
      preLoaderRoute: typeof CareerLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/employees': {
      id: '/admin/employees'
      path: '/employees'
      fullPath: '/admin/employees'
      preLoaderRoute: typeof AdminEmployeesRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminEmployeesRoute: typeof AdminEmployeesRoute
  AdminProductsRoute: typeof AdminProductsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminEmployeesRoute: AdminEmployeesRoute,
  AdminProductsRoute: AdminProductsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  TeamsRoute: TeamsRoute,
  AboutLazyRoute: AboutLazyRoute,
  CareerLazyRoute: CareerLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  LocationLazyRoute: LocationLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  PolicyLazyRoute: PolicyLazyRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  ProductsIndexLazyRoute: ProductsIndexLazyRoute,
  ProjectsIndexLazyRoute: ProjectsIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
